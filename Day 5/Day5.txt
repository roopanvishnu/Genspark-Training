-- SELECT Queries
-- List all films with their length and rental rate, sorted by length descending.
-- Columns: title, length, rental_rate
select title, length, rental_rate from film;

-- Find the top 5 customers who have rented the most films.
-- Hint: Use the rental and customer tables.
select concat (first_name, ' ',last_name) as top_5_customers from customer join rental on
customer.customer_id = rental.customer_id limit 5;
-- Display all films that have never been rented.
-- Hint: Use LEFT JOIN between film and inventory → rental.
select f.film_id, f.title from film f left join inventory i on f.film_id = i.film_id left join
rental r on i.inventory_id = r.inventory_id where r.rental_id is null;
-- JOIN Queries
-- List all actors who appeared in the film ‘Academy Dinosaur’.
-- Tables: film, film_actor, actor
select a.actor_id, a.first_name, a.last_name from actor a join film_actor fa on a.actor_id = fa.actor_id
join film f on fa.film_id = f.film_id where f.title='Academy Dinosaur';
-- List each customer along with the total number of rentals they made and the total amount paid.
-- Tables: customer, rental, payment
 SELECT 
    c.customer_id,
    c.first_name || ' ' || c.last_name AS customer_name,
    COUNT(r.rental_id) AS total_rentals,
    SUM(p.amount) AS total_paid
FROM customer c
LEFT JOIN rental r ON c.customer_id = r.customer_id
LEFT JOIN payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id, c.first_name, c.last_name;

-- CTE-Based Queries
-- Using a CTE, show the top 3 rented movies by number of rentals.
-- Columns: title, rental_count
WITH rental_counts AS (
    SELECT f.title, COUNT(r.rental_id) AS rental_count
    FROM film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY f.title
)
SELECT * FROM rental_counts
ORDER BY rental_count DESC
LIMIT 3;

-- Find customers who have rented more than the average number of films.
-- Use a CTE to compute the average rentals per customer, then filter.
WITH customer_rentals AS (
    SELECT customer_id, COUNT(*) AS rental_count
    FROM rental
    GROUP BY customer_id
),
average_rentals AS (
    SELECT AVG(rental_count) AS avg_count FROM customer_rentals
)
SELECT cr.customer_id, cr.rental_count
FROM customer_rentals cr, average_rentals ar
WHERE cr.rental_count > ar.avg_count;

--  Function Questions
-- Write a function that returns the total number of rentals for a given customer ID.
-- Function: get_total_rentals(customer_id INT)

CREATE OR REPLACE FUNCTION get_total_rentals(customer_id INT)
RETURNS INT AS $$
DECLARE
    total INT;
BEGIN
    SELECT COUNT(*) INTO total
    FROM rental
    WHERE rental.customer_id = customer_id;
    
    RETURN total;
END;
$$ LANGUAGE plpgsql;

-- Stored Procedure Questions
-- Write a stored procedure that updates the rental rate of a film by film ID and new rate.
-- Procedure: update_rental_rate(film_id INT, new_rate NUMERIC)
CREATE OR REPLACE PROCEDURE update_rental_rate(film_id INT, new_rate NUMERIC)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE film
    SET rental_rate = new_rate
    WHERE film_id = film_id;
END;
$$;

-- Write a procedure to list overdue rentals (return date is NULL and rental date older than 7 days).
-- Procedure: get_overdue_rentals() that selects relevant columns.
CREATE OR REPLACE PROCEDURE get_overdue_rentals()
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT r.rental_id, c.first_name, c.last_name, r.rental_date
    FROM rental r
    JOIN customer c ON r.customer_id = c.customer_id
    WHERE r.return_date IS NULL
      AND r.rental_date < CURRENT_DATE - INTERVAL '7 days';
END;
$$;

-- Cursor-Based Questions (5)
-- Write a cursor that loops through all films and prints titles longer than 120 minutes.
 do $$
 declare 
 film_rec RECORD;
 begin for film_rec in select title,length from film where length > 120 loop raise notice 'Title: %',film_rec.title;
 end loop; 
 end $$;
-- Create a cursor that iterates through all customers and counts how many rentals each made.
DO $$
DECLARE
    cust_rec RECORD;
    rental_count INT;
BEGIN
    FOR cust_rec IN SELECT customer_id FROM customer LOOP
        SELECT COUNT(*) INTO rental_count FROM rental WHERE customer_id = cust_rec.customer_id;
        RAISE NOTICE 'Customer ID: %, Rentals: %', cust_rec.customer_id, rental_count;
    END LOOP;
END $$;

-- Using a cursor, update rental rates: Increase rental rate by $1 for films with less than 5 rentals.
do $$
declare film_rec RECORD;
begin 
for film_rec in select f.film_id from film f
join inventory i on f.film_id = i.film_id 
join rental r on i.inventory_id = r.inventory_id
group by f.film_id
having count (r.rental_id)<5
loop 
update film set rental_rate = rental_rate +1 where film_id = film_rec.film_id;
end loop;
end $$;
-- Create a function using a cursor that collects titles of all films from a particular category.
 CREATE OR REPLACE FUNCTION get_titles_by_category(cat_id INT)
RETURNS TEXT AS $$
DECLARE
    film_title TEXT;
    result TEXT := '';
    cur CURSOR FOR
        SELECT f.title FROM film f
        JOIN film_category fc ON f.film_id = fc.film_id
        WHERE fc.category_id = cat_id;
BEGIN
    OPEN cur;
    LOOP
        FETCH cur INTO film_title;
        EXIT WHEN NOT FOUND;
        result := result || film_title || ', ';
    END LOOP;
    CLOSE cur;
    RETURN TRIM(TRAILING ', ' FROM result);
END;
$$ LANGUAGE plpgsql;

-- Loop through all stores and count how many distinct films are available in each store using a cursor.
 DO $$
DECLARE
    store_rec RECORD;
    film_count INT;
BEGIN
    FOR store_rec IN SELECT store_id FROM store LOOP
        SELECT COUNT(DISTINCT film_id)
        INTO film_count
        FROM inventory
        WHERE store_id = store_rec.store_id;
        RAISE NOTICE 'Store ID: %, Films: %', store_rec.store_id, film_count;
    END LOOP;
END $$;

-- Trigger-Based Questions (5)
-- Write a trigger that logs whenever a new customer is inserted.
 CREATE TABLE customer_log (
    log_id SERIAL PRIMARY KEY,
    customer_id INT,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE OR REPLACE FUNCTION log_new_customer()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO customer_log(customer_id) VALUES (NEW.customer_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_log_new_customer
AFTER INSERT ON customer
FOR EACH ROW EXECUTE FUNCTION log_new_customer();

-- Create a trigger that prevents inserting a payment of amount 0.
 CREATE OR REPLACE FUNCTION prevent_zero_payment()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.amount = 0 THEN
        RAISE EXCEPTION 'Payment amount cannot be zero.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_prevent_zero_payment
BEFORE INSERT ON payment
FOR EACH ROW EXECUTE FUNCTION prevent_zero_payment();

-- Set up a trigger to automatically set last_update on the film table before update.
CREATE OR REPLACE FUNCTION update_last_update()
RETURNS TRIGGER AS $$
BEGIN
    NEW.last_update := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_last_update
BEFORE UPDATE ON film
FOR EACH ROW EXECUTE FUNCTION update_last_update();
